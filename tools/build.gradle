public static String getDomain(String s) {
     String[] f = s.split('\\.')
     return f[1].capitalize()
}
task args
args.map = [:]

defaultTasks 'help'

tasks.addRule("Pattern: <property>=<value>: Passes arguments to the scripts") { String taskName ->
    def match = taskName =~ /(.*?)=(.*?$)/
    if(match){
        args.map[match[0][1]] = match[0][2]
        task(taskName) << {
        }
    }
}


task help << {
    println ("""\
Welcome to Wasabi

To get started run: gradle -q server dir={directory} package={package}

e.g.: gradle -q server dir=~/home/project/myAppfolder package=org.domain

""")



}

task setup(dependsOn: args) << {
    if (!args.map.dir || !args.map.package) {
        throw new GradleException('You need to specify a dir and package parameters')
    } else {
        def directory = new File(args.map.dir)
        println('Here we go...\n')
        directory.mkdirs()
        println('Creating directory ' + args.map.dir + '...')
        def sourcedir = new File(args.map.dir + '/src/main/kotlin')
        sourcedir.mkdirs()
        println('Creating src directory ...')
        def testdir = new File(args.map.dir + '/src/test/kotlin')
        testdir.mkdirs()
        println('Creating test directory ...')

    }
}

task createGradle(dependsOn: setup) << {
        println('Creating build.gradle file ...')
        def gradleFile = new File(args.map.dir+'/build.gradle')
       
         
        def mainClass = args.map.package + '.' + getDomain(args.map.package) + 'Package'
        gradleFile.append("""\
buildscript {
    project.ext.kotlin_version = '0.6.1670'
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:\$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = '${mainClass}'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "http://repository.jetbrains.com/all"
    }
}

dependencies {
    compile "org.wasabi:wasabi:0.1-SNAPSHOT"
    compile "org.jetbrains.kotlin:kotlin-stdlib:\$kotlin_version"

}

sourceSets {
    src {
        main {
            kotlin
        }
    }
    test {
        main {
            kotlin
        }
    }
    main.java.srcDirs += 'src/main/kotlin'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}
""")
}



task server(dependsOn: createGradle) << {
        println('Creating server ...')
        def serverFile = new File(args.map.dir+'/src/main/kotlin/server.kt')
        serverFile.append("""\
package ${args.map.package}

import org.wasabi.app.AppServer

fun main(args: Array<String>) {

    val server = AppServer()

    // insert routes here
    server.get("/", { response.send ("Hello Wasabi")})

    server.start()

}
""")



    println('Done!')

    println("""

You can now import your Gradle project into your favorite IDE or use an editor.
A default template has been created for you called server.kt. Define your routes there.

Once you're ready to deploy, run:

gradle distZip

This will create a zip file with your application under build/distributions.
Inside the zip there is a bin folder with two files named the same as your application.
One is a shell script for Linux/OSX, the other for Windows. Running it will start your application.

Have fun!



""")

}
